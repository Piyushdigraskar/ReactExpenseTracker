import React, { useEffect, useState } from "react";
import ItemContext from "./ItemContext";
import axios from "axios";

const ItemProvider = (props) => {
    const [items, setItems] = useState([]);

    useEffect(() => {
        fetchItemFromServer();
    }, []);

    const fetchItemFromServer = () => {
        axios.get(`https://expense-tracker--react-default-rtdb.firebaseio.com/expense.json`)
            .then(response => {
                console.log(response.data);
                if (response.status === 200) {
                    const fetchedItems = Object.entries(response.data || {}).map(([key, value]) => ({
                        ...value,
                        idd: key // Assigning Firebase ID to 'idd'
                    }));
                    setItems(fetchedItems);
                } else {
                    throw new Error('Items cannot be obtained from firebase');
                }
            })
            .catch(error => {
                console.error('response error', error);
            });
    };

    const addItemHandler = async (item) => {
        try {
            const response = await axios.post(`https://expense-tracker--react-default-rtdb.firebaseio.com/expense.json`, item);
            if (response.status === 200) {
                const newItem = { ...item, idd: response.data.name }; // Use the ID generated by Firebase
                setItems(prevItems => [...prevItems, newItem]);
                console.log('Item added Successfully');
            } else {
                throw new Error('Item not added to firebase');
            }
        } catch (error) {
            console.error('Response error on adding', error);
        }
    };

    const editItemHandler = async (idd, updatedItems) =>{
        try {
            const response = await axios.put(`https://expense-tracker--react-default-rtdb.firebaseio.com/expense/${idd}.json`, updatedItems);
    
            if(response.status === 200){
                console.log('Edited successfully');
                // Update the local state immediately after editing
                const updatedItemIndex = items.findIndex(item => item.idd === idd);
                const updatedItemsArray = [...items];
                updatedItemsArray[updatedItemIndex] = { ...updatedItems, idd }; // Ensure 'idd' is preserved
                setItems(updatedItemsArray);
            }
            else{
                throw new Error('Items not Edited successfully');
            }
        } catch (error) {
            console.error("Response not Ok",error);
        }
    }
    

    const deleteItemHandler = async (idd) => { 
        console.log(idd);
        // Change parameter name to 'idd' for consistency
        try {
            const response = await axios.delete(`https://expense-tracker--react-default-rtdb.firebaseio.com/expense/${idd}.json`);
            if (response.status === 200) {
                console.log('Item deleted successfully');
                setItems(prevItems => prevItems.filter(item => item.idd !== idd));
            } else {
                throw new Error('Item could not be deleted');
            }
        } catch (error) {
            console.error('Error deleting item:', error);
        }
    };

    const ItemValue = {
        items: items,
        addItem: addItemHandler,
        editItem:editItemHandler,
        deleteItem: deleteItemHandler
    };

    return <ItemContext.Provider value={ItemValue}>{props.children}</ItemContext.Provider>;
};

export default ItemProvider;
